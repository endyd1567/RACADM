#!/bin/bash

# ÏÑ§Ï†ï ÌååÏùº Í≤ΩÎ°ú
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
CONFIG_FILE="$SCRIPT_DIR/../racadm_config"

# Í∏∞Î≥∏Í∞í Ï¥àÍ∏∞Ìôî
RACUSER=""
RACPASS=""
ipmi_state=""
IDRAC_IP=""
IP_FILE=""
max_jobs=10
current_jobs=0

# ÏÇ¨Ïö©Î≤ï Ï∂úÎ†•
usage() {
    echo "Error: -s option with 0 or 1 is required."
    echo "Usage: $0 -s <0|1> [-h <iDRAC_IP> | -f <file_with_iDRAC_IPs>]"
    echo ""
    echo "Options:"
    echo "  -s <0|1>         Set IPMI over LAN state: 0 (Disabled), 1 (Enabled)"
    echo "  -h <iDRAC_IP>    Target single iDRAC IP"
    echo "  -f <file>        File containing iDRAC IPs (one per line)"
    echo ""
    echo "üìå Ïã§Ìñâ ÏòàÏãú:"
    echo "  $0 -s 1 -h 192.168.0.101"
    echo "  $0 -s 0 -f ip_list.txt"
    exit 1
}

# ÏòµÏÖò ÌååÏã±
while getopts "s:h:f:" opt; do
    case $opt in
        s)
            [[ "$OPTARG" != "0" && "$OPTARG" != "1" ]] && usage
            ipmi_state="$OPTARG"
            ;;
        h) IDRAC_IP="$OPTARG" ;;
        f) IP_FILE="$OPTARG" ;;
        *) usage ;;
    esac
done

# ÌïÑÏàò ÏòµÏÖò Í≤ÄÏÇ¨
[[ -z "$ipmi_state" ]] && usage
[[ -z "$IDRAC_IP" && -z "$IP_FILE" ]] && usage
[[ -n "$IDRAC_IP" && -n "$IP_FILE" ]] && echo "‚ùå Error: -h and -f cannot be used together." && usage

# ÏÑ§Ï†ï ÌååÏùº ÌååÏã±
if [[ -f "$CONFIG_FILE" ]]; then
    while IFS='=' read -r key value || [[ -n "$key" ]]; do
        key=$(echo "$key" | xargs)
        value=$(echo "$value" | xargs)
        [[ -z "$key" || "$key" =~ ^# ]] && continue
        case "$key" in
            "RACUSER") RACUSER="$value" ;;
            "RACPSWD") RACPASS="$value" ;;
        esac
    done < "$CONFIG_FILE"
else
    echo "‚ùå ÏÑ§Ï†ï ÌååÏùºÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§: $CONFIG_FILE"
    exit 1
fi

# ÌïÑÏàò ÏÑ§Ï†ï ÌôïÏù∏
[[ -z "$RACUSER" || -z "$RACPASS" ]] && echo "‚ùå ÏÑ§Ï†ï ÌååÏùºÏóê RACUSER ÎòêÎäî RACPSWD Í∞íÏù¥ ÏóÜÏäµÎãàÎã§." && exit 1

# IPMI LAN ÏÑ§Ï†ï Ìï®Ïàò
set_ipmi_lan() {
    local ip=$1
    echo "‚ñ∂ $ip: IPMI over LAN ÏÑ§Ï†ï ÏãúÎèÑ "
    output=$(racadm -r "$ip" -u "$RACUSER" -p "$RACPASS" set iDRAC.IPMILan.Enable "$ipmi_state" --nocertwarn 2>&1)
    if echo "$output" | grep -qi "successfully"; then
        echo "‚úÖ $ip: ÏÑ§Ï†ï ÏÑ±Í≥µ ($ipmi_state)"
    else
        echo "‚ùå $ip: ÏÑ§Ï†ï Ïã§Ìå® - $output"
    fi
}

# Îã®Ïùº IP Ïã§Ìñâ
if [[ -n "$IDRAC_IP" ]]; then
    set_ipmi_lan "$IDRAC_IP"
    exit 0
fi

# Îã§Ï§ë IP Ïã§Ìñâ (Î≥ëÎ†¨ Ï≤òÎ¶¨)
if [[ -f "$IP_FILE" ]]; then
    while IFS= read -r ip || [[ -n "$ip" ]]; do
        ip=$(echo "$ip" | xargs)
        [[ -z "$ip" || "$ip" =~ ^# ]] && continue
        if [[ ! "$ip" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "‚ö†Ô∏è  Skipping invalid IP: $ip"
            continue
        fi

        while [[ $(jobs -p | wc -l) -ge $max_jobs ]]; do
            wait -n
        done

        set_ipmi_lan "$ip" &
    done < "$IP_FILE"

    wait
    echo "‚úÖ All IPMI over LAN ÏÑ§Ï†ï ÏûëÏóÖ ÏôÑÎ£å."
else
    echo "‚ùå ÌååÏùºÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§: $IP_FILE"
    exit 1
fi
